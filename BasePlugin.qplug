-- Base Plugin
-- by
-- Month 20YY

PluginInfo = {
    Name = "Base Plugin~Base Plugin",
    Version = "0.0",
    BuildVersion = "0.0.0.0",
    Id = "d1b38196-51a8-4490-a00a-e72f0df1f056",
    Author = "",
    Description = "Compiled from Visual Studio Code",
}

function GetColor(props)
  return { 102, 102, 102 }
end

function GetPrettyName(props)
  return "Base Plugin " .. PluginInfo.Version
end

--[=[]]
function GetPages(props) --optional function if plugin has multiple pages
  pages = {}
  --[[ Pages File Contents ]]
  return pages
end

function GetModel(props) --optional function to define model if plugin supports more than one model
  model = {}
  --[[ Model File Contents ]]
  return model
end
--]=]

function GetProperties()
  props = {}
  --[[ Properties File Contents ]]
  return props
end

function GetControls(props)
  ctrls = {}
  table.insert(ctrls,{Name = "Status",ControlType = "Indicator",IndicatorType = "Status",PinStyle = "Output",UserPin = true,Count = 1})
  return ctrls
end

function GetControlLayout(props)
  layout   = {}
  graphics = {}
  --[[ Layout File Contents ]]
  return layout, graphics
end

--Start event based logic
if Controls then
  -- Control aliases
  Status = Controls.Status
  
  -- Variables and flags
  DebugTx=false
  DebugRx=false
  DebugFunction=false
  DebugPrint=Properties["Debug Print"].Value
  
  -- Sockets and services
  
  -- Timers, tables, and constants
  StatusState = { OK = 0, COMPROMISED = 1, FAULT = 2, NOTPRESENT = 3, MISSING = 4, INITIALIZING = 5 }
  PollTimer = Timer.New()
  PollTime = 3
  
  -- Helper functions
  -- A function to determine common print statement scenarios for troubleshooting
  function SetupDebugPrint()
    if DebugPrint=="Tx/Rx" then
      DebugTx,DebugRx=true,true
    elseif DebugPrint=="Tx" then
      DebugTx=true
    elseif DebugPrint=="Rx" then
      DebugRx=true
    elseif DebugPrint=="Function Calls" then
      DebugFunction=true
    elseif DebugPrint=="All" then
      DebugTx,DebugRx,DebugFunction=true,true,true
    end
  end
  
  -- Update the Status control
  function ReportStatus(state,msg)
    if DebugFunction then print("ReportStatus() Called") end
    local msg=msg or ""
    Status.Value=StatusState[state]
    Status.String=msg
  end
  
  -- Send data to device
  function Send(cmd)
    if DebugFunction then print("Send() Called") end
    if DebugTx then print("Tx: "..cmd) end
  end
  
  -- A function to clear controls/flags/variables and clears tables
  function ClearVariables()
    if DebugFunction then print("ClearVariables() Called") end
    PollTimer:Stop()
  end
  
  -- A function to trigger other functions or set flags if disconnected
  function Disconnected()
    if DebugFunction then print("Disconnect() Called") end
    ClearVariables()
  end
  
  -- A function to handle connection
  function Connect()
    if DebugFunction then print("Connect() Called") end
    ClearVariables()
    Device:Connect(IPAddress.String,Port.Value)
  end
  
  -- A function to trigger other functions once connected
  function Connected()
    if DebugFunction then print("Connected() Called") end
    ReportStatus("OK")
    GetDeviceInfo()
    PollTimer:Start(PollTime)
  end
  
  -- Initial data grab from device
  function GetDeviceInfo()
    if DebugFunction then print("GetDeviceInfo() Called") end
  end
  
  -- Poll function for updates and state changes
  function PollDevice()
    if DebugFunction then print("PollDevice() Called") end
  end
  
  -- EventHandlers
  PollTimer.EventHandler = PollDevice
  
  -- Buffer Management
  function ParseResponse()
    if DebugFunction then print("ParseResponse() Called") end
    -- Entire buffer is set to newrx here
    rx = Device:Read(Device.BufferLength)
    while rx do 
      if DebugRx then print("Rx: "..rx) end
    end
  end
  
  -- Socket Management
  
  -- Initialization Function
  function Initialization()
    if DebugFunction then print("Initialization() Called") end
    SetupDebugPrint()
    Connect()
  end
  
  Initialization()
end